// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebsitePresentation.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230715120726_AddArmyClass")]
    partial class AddArmyClass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "5ef87897-d10c-4a4e-a70e-29d711af49ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "6effd0ef-ae91-4b48-be54-8967a8aae864",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "0b7d7291-efc7-423d-9e02-417ef8aeec4d",
                            Name = "Add",
                            NormalizedName = "ADD"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "0840e46b-eca0-4116-8df7-6fedb6d8fdf9",
                            Name = "Edit",
                            NormalizedName = "EDIT"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "252133a9-bf47-43c8-8e5a-637b34a2dfaa",
                            Name = "Delete",
                            NormalizedName = "DELETE"
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "d4bd3db1-5f66-4c08-87d9-8e7665201811",
                            Name = "FullWriter",
                            NormalizedName = "FULLWRITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ArmyMembers");
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_ArmyMembers")
                        .HasColumnType("int");

                    b.Property<int?>("Id_ArmySocialsName")
                        .HasColumnType("int");

                    b.Property<string>("SocialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_ArmyMembers");

                    b.HasIndex("Id_ArmySocialsName");

                    b.ToTable("armyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ArmySocialsNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostSocialVideo")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArmySocialsNameId");

                    b.HasIndex("Id_SectionPostSocialVideo");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostVideos");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("armySocialsNames");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_LanguageStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_LanguageStep");

                    b.ToTable("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2472),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2474),
                            Name = "fa-IR",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2473),
                            TagsName = "Farsi",
                            Timable = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2478),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2480),
                            Name = "en-US",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2479),
                            TagsName = "English",
                            Timable = false
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2483),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2485),
                            Name = "ku-Arab",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2484),
                            TagsName = "Kurdish",
                            Timable = false
                        });
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostCommentStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostCommentStep");

                    b.ToTable("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostCommentSteps");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostFiles");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostImages");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostSocialVideos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2531),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2533),
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2532),
                            TagsName = "یوتیوب",
                            Timable = false,
                            Title = "Youtube"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2536),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2538),
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2537),
                            TagsName = "فەیسبوک",
                            Timable = false,
                            Title = "FaceBook"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2541),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2544),
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2542),
                            TagsName = "تێلێگرام",
                            Timable = false,
                            Title = "Telegram"
                        });
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostType")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionThirdStep")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewsNumber")
                        .HasColumnType("int");

                    b.Property<string>("WriterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostType");

                    b.HasIndex("Id_SectionThirdStep");

                    b.ToTable("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2501),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2503),
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2502),
                            TagsName = "نوسراوە",
                            Timable = false,
                            Title = "Article"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2506),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2509),
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2507),
                            TagsName = "ویدیۆ",
                            Timable = false,
                            Title = "Video"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2511),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2514),
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2513),
                            TagsName = "فایل",
                            Timable = false,
                            Title = "File"
                        });
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionFirstStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionFirstStep");

                    b.ToTable("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionSecondStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionSecondStep");

                    b.ToTable("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.WebsiteActiveTimeControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("WebsiteTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteActiveTimeControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2361),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2366),
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2363),
                            TagsName = "وێب سایت",
                            Timable = false,
                            WebsiteTitle = "ناوی وێب سایت"
                        });
                });

            modelBuilder.Entity("Model.WebsiteAdminsControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellphoneNmber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteAdminsControls");
                });

            modelBuilder.Entity("Model.WebsiteThemControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WebsiteThemControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2559),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2562),
                            SectionName = "RightSection",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2560),
                            TagsName = "RightSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2564),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2567),
                            SectionName = "Header",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2566),
                            TagsName = "Header",
                            Timable = false
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2569),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2572),
                            SectionName = "HeaderLeft",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2571),
                            TagsName = "HeaderLeft",
                            Timable = false
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2574),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2577),
                            SectionName = "HeaderCenter",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2576),
                            TagsName = "HeaderCenter",
                            Timable = false
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2579),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2582),
                            SectionName = "HeaderRight",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2581),
                            TagsName = "HeaderRight",
                            Timable = false
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2585),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2587),
                            SectionName = "Search",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2586),
                            TagsName = "Search",
                            Timable = false
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2590),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2593),
                            SectionName = "Marquee",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2591),
                            TagsName = "Marquee",
                            Timable = false
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2595),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2598),
                            SectionName = "LeftSection",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2596),
                            TagsName = "LeftSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2600),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2603),
                            SectionName = "Footer",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2602),
                            TagsName = "Footer",
                            Timable = false
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2605),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2608),
                            SectionName = "News",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2607),
                            TagsName = "News",
                            Timable = false
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2611),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2613),
                            SectionName = "SectionVideo",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2612),
                            TagsName = "SectionVideo",
                            Timable = false
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2616),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2618),
                            SectionName = "SectionArticle",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2617),
                            TagsName = "SectionArticle",
                            Timable = false
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2621),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2623),
                            SectionName = "MostViewd",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2622),
                            TagsName = "MostViewd",
                            Timable = false
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2626),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2628),
                            SectionName = "ThirdStepCategories",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2627),
                            TagsName = "ThirdStepCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2631),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2633),
                            SectionName = "ViewSubCategoryPosts",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2632),
                            TagsName = "ViewSubCategoryPosts",
                            Timable = false
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2636),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2638),
                            SectionName = "ViewPost",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2637),
                            TagsName = "ViewPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2641),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2643),
                            SectionName = "RelatedPost",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2642),
                            TagsName = "RelatedPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2646),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2648),
                            SectionName = "ViewComment",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2647),
                            TagsName = "ViewComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2651),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2653),
                            SectionName = "InsertComment",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2652),
                            TagsName = "InsertComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2656),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2659),
                            SectionName = "SectionFile",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2657),
                            TagsName = "SectionFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2661),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2664),
                            SectionName = "ViewFile",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2662),
                            TagsName = "ViewFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2666),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2669),
                            SectionName = "LogIn",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2667),
                            TagsName = "LogIn",
                            Timable = false
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2671),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2674),
                            SectionName = "Language",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2672),
                            TagsName = "Language",
                            Timable = false
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2676),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2679),
                            SectionName = "FooterCategories",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2677),
                            TagsName = "FooterCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2681),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2684),
                            SectionName = "NavBarSticky",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2683),
                            TagsName = "NavBarSticky",
                            Timable = false
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2686),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2689),
                            SectionName = "SlideShow",
                            StartDate = new DateTime(2023, 7, 15, 14, 7, 26, 177, DateTimeKind.Local).AddTicks(2688),
                            TagsName = "SlideShow",
                            Timable = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.HasOne("Model.ArmyMembers", "ArmyMembers")
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("Id_ArmyMembers")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.ArmySocialsName", "ArmySocialsName")
                        .WithMany()
                        .HasForeignKey("Id_ArmySocialsName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ArmyMembers");

                    b.Navigation("ArmySocialsName");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.HasOne("Model.ArmySocialsName", null)
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("ArmySocialsNameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostSocialVideo", "SectionPostSocialVideo")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostSocialVideo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostSocialVideo");

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.HasOne("Model.SectionLanguage", "SectionLanguage")
                        .WithMany("SectionFirstSteps")
                        .HasForeignKey("Id_LanguageStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionLanguage");
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.HasOne("Model.SectionPostCommentStep", "SectionPostCommentStep")
                        .WithMany("SectionPostAnswerSteps")
                        .HasForeignKey("Id_SectionPostCommentStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostCommentStep");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostCommentSteps")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostFiles")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostImages")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.HasOne("Model.SectionPostType", "SectionPostType")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionPostType")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionThirdStep", "SectionThirdStep")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionThirdStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostType");

                    b.Navigation("SectionThirdStep");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.HasOne("Model.SectionFirstStep", "SectionFirstStep")
                        .WithMany("SectionSecondSteps")
                        .HasForeignKey("Id_SectionFirstStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionFirstStep");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.HasOne("Model.SectionSecondStep", "SectionSecondStep")
                        .WithMany("SectionThirdSteps")
                        .HasForeignKey("Id_SectionSecondStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionSecondStep");
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Navigation("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Navigation("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Navigation("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Navigation("SectionPostCommentSteps");

                    b.Navigation("SectionPostFiles");

                    b.Navigation("SectionPostImages");

                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Navigation("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Navigation("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Navigation("SectionPostSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
