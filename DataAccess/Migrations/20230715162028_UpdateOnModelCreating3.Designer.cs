// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebsitePresentation.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230715162028_UpdateOnModelCreating3")]
    partial class UpdateOnModelCreating3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "aa6c7940-b38e-4df9-bc05-a7ab621f6782",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "975caa96-ab4e-4143-a6a3-c183e565de28",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "91c13f8f-03e3-48a5-9eff-33e6a83d45a2",
                            Name = "Add",
                            NormalizedName = "ADD"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "08c1468e-7de2-402f-b56a-f19185d031d3",
                            Name = "Edit",
                            NormalizedName = "EDIT"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "c9ede106-64c6-4cf1-b8a4-f1087aa27d81",
                            Name = "Delete",
                            NormalizedName = "DELETE"
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "e1cad87c-7332-4d2c-8dc6-974de1a468d9",
                            Name = "FullWriter",
                            NormalizedName = "FULLWRITER"
                        },
                        new
                        {
                            Id = "7",
                            ConcurrencyStamp = "20537bfa-4579-4460-b2d6-0717a7f849a6",
                            Name = "ArmyAdmin",
                            NormalizedName = "ARMYADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ArmyMembers");
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_ArmyMembers")
                        .HasColumnType("int");

                    b.Property<int?>("Id_ArmySocialsName")
                        .HasColumnType("int");

                    b.Property<string>("SocialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_ArmyMembers");

                    b.HasIndex("Id_ArmySocialsName");

                    b.ToTable("armyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ArmySocialsNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostSocialVideo")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArmySocialsNameId");

                    b.HasIndex("Id_SectionPostSocialVideo");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostVideos");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("armySocialsNames");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_LanguageStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_LanguageStep");

                    b.ToTable("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9718),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9721),
                            Name = "fa-IR",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9720),
                            TagsName = "Farsi",
                            Timable = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9725),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9727),
                            Name = "en-US",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9726),
                            TagsName = "English",
                            Timable = false
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9730),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9733),
                            Name = "ku-Arab",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9732),
                            TagsName = "Kurdish",
                            Timable = false
                        });
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostCommentStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostCommentStep");

                    b.ToTable("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostCommentSteps");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostFiles");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostImages");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostSocialVideos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9788),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9790),
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9789),
                            TagsName = "یوتیوب",
                            Timable = false,
                            Title = "Youtube"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9793),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9796),
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9795),
                            TagsName = "فەیسبوک",
                            Timable = false,
                            Title = "FaceBook"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9799),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9801),
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9800),
                            TagsName = "تێلێگرام",
                            Timable = false,
                            Title = "Telegram"
                        });
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostType")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionThirdStep")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewsNumber")
                        .HasColumnType("int");

                    b.Property<string>("WriterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostType");

                    b.HasIndex("Id_SectionThirdStep");

                    b.ToTable("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9751),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9754),
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9752),
                            TagsName = "نوسراوە",
                            Timable = false,
                            Title = "Article"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9758),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9760),
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9759),
                            TagsName = "ویدیۆ",
                            Timable = false,
                            Title = "Video"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9763),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9766),
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9764),
                            TagsName = "فایل",
                            Timable = false,
                            Title = "File"
                        });
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionFirstStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionFirstStep");

                    b.ToTable("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionSecondStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionSecondStep");

                    b.ToTable("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.WebsiteActiveTimeControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("WebsiteTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteActiveTimeControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9554),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9559),
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9556),
                            TagsName = "وێب سایت",
                            Timable = false,
                            WebsiteTitle = "ناوی وێب سایت"
                        });
                });

            modelBuilder.Entity("Model.WebsiteAdminsControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellphoneNmber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteAdminsControls");
                });

            modelBuilder.Entity("Model.WebsiteThemControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WebsiteThemControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9820),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9822),
                            SectionName = "RightSection",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9821),
                            TagsName = "RightSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9825),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9828),
                            SectionName = "Header",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9827),
                            TagsName = "Header",
                            Timable = false
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9831),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9833),
                            SectionName = "HeaderLeft",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9832),
                            TagsName = "HeaderLeft",
                            Timable = false
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9836),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9839),
                            SectionName = "HeaderCenter",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9837),
                            TagsName = "HeaderCenter",
                            Timable = false
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9841),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9844),
                            SectionName = "HeaderRight",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9843),
                            TagsName = "HeaderRight",
                            Timable = false
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9847),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9849),
                            SectionName = "Search",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9848),
                            TagsName = "Search",
                            Timable = false
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9852),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9855),
                            SectionName = "Marquee",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9853),
                            TagsName = "Marquee",
                            Timable = false
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9857),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9860),
                            SectionName = "LeftSection",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9859),
                            TagsName = "LeftSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9863),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9865),
                            SectionName = "Footer",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9864),
                            TagsName = "Footer",
                            Timable = false
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9868),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9871),
                            SectionName = "News",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9869),
                            TagsName = "News",
                            Timable = false
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9873),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9876),
                            SectionName = "SectionVideo",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9875),
                            TagsName = "SectionVideo",
                            Timable = false
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9879),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9881),
                            SectionName = "SectionArticle",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9880),
                            TagsName = "SectionArticle",
                            Timable = false
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9884),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9886),
                            SectionName = "MostViewd",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9885),
                            TagsName = "MostViewd",
                            Timable = false
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9889),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9892),
                            SectionName = "ThirdStepCategories",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9890),
                            TagsName = "ThirdStepCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9894),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9897),
                            SectionName = "ViewSubCategoryPosts",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9896),
                            TagsName = "ViewSubCategoryPosts",
                            Timable = false
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9900),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9902),
                            SectionName = "ViewPost",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9901),
                            TagsName = "ViewPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9905),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9908),
                            SectionName = "RelatedPost",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9906),
                            TagsName = "RelatedPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9910),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9913),
                            SectionName = "ViewComment",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9912),
                            TagsName = "ViewComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9916),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9918),
                            SectionName = "InsertComment",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9917),
                            TagsName = "InsertComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9921),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9924),
                            SectionName = "SectionFile",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9922),
                            TagsName = "SectionFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9926),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9929),
                            SectionName = "ViewFile",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9928),
                            TagsName = "ViewFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9931),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9934),
                            SectionName = "LogIn",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9933),
                            TagsName = "LogIn",
                            Timable = false
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9937),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9939),
                            SectionName = "Language",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9938),
                            TagsName = "Language",
                            Timable = false
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9942),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9945),
                            SectionName = "FooterCategories",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9943),
                            TagsName = "FooterCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9947),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9950),
                            SectionName = "NavBarSticky",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9949),
                            TagsName = "NavBarSticky",
                            Timable = false
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9953),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9956),
                            SectionName = "SlideShow",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9954),
                            TagsName = "SlideShow",
                            Timable = false
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9959),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9962),
                            SectionName = "AdminPanel",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9961),
                            TagsName = "AdminPanel",
                            Timable = false
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9965),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9967),
                            SectionName = "AdminPanelArmy",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9966),
                            TagsName = "AdminPanelArmy",
                            Timable = false
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9970),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9972),
                            SectionName = "MenuBar",
                            StartDate = new DateTime(2023, 7, 15, 18, 20, 27, 723, DateTimeKind.Local).AddTicks(9971),
                            TagsName = "MenuBar",
                            Timable = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.HasOne("Model.ArmyMembers", "ArmyMembers")
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("Id_ArmyMembers")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.ArmySocialsName", "ArmySocialsName")
                        .WithMany()
                        .HasForeignKey("Id_ArmySocialsName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ArmyMembers");

                    b.Navigation("ArmySocialsName");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.HasOne("Model.ArmySocialsName", null)
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("ArmySocialsNameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostSocialVideo", "SectionPostSocialVideo")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostSocialVideo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostSocialVideo");

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.HasOne("Model.SectionLanguage", "SectionLanguage")
                        .WithMany("SectionFirstSteps")
                        .HasForeignKey("Id_LanguageStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionLanguage");
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.HasOne("Model.SectionPostCommentStep", "SectionPostCommentStep")
                        .WithMany("SectionPostAnswerSteps")
                        .HasForeignKey("Id_SectionPostCommentStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostCommentStep");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostCommentSteps")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostFiles")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostImages")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.HasOne("Model.SectionPostType", "SectionPostType")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionPostType")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionThirdStep", "SectionThirdStep")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionThirdStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostType");

                    b.Navigation("SectionThirdStep");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.HasOne("Model.SectionFirstStep", "SectionFirstStep")
                        .WithMany("SectionSecondSteps")
                        .HasForeignKey("Id_SectionFirstStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionFirstStep");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.HasOne("Model.SectionSecondStep", "SectionSecondStep")
                        .WithMany("SectionThirdSteps")
                        .HasForeignKey("Id_SectionSecondStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionSecondStep");
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Navigation("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Navigation("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Navigation("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Navigation("SectionPostCommentSteps");

                    b.Navigation("SectionPostFiles");

                    b.Navigation("SectionPostImages");

                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Navigation("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Navigation("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Navigation("SectionPostSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
