// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebsitePresentation.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230716183713_updateoncreatingmodellanguagesection")]
    partial class updateoncreatingmodellanguagesection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "da915b4e-ce9c-4940-9993-1d09e47a4002",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "db81bb12-6b4c-4132-9610-8ed69bc5c337",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "2714118d-2e8d-4ddf-94c3-e5b5f6dceaa1",
                            Name = "Add",
                            NormalizedName = "ADD"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "3620bd79-71b7-4516-9d46-a21e27276afc",
                            Name = "Edit",
                            NormalizedName = "EDIT"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "72652e4d-7883-4f1a-8fab-cbbd3dea87e2",
                            Name = "Delete",
                            NormalizedName = "DELETE"
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "d139c389-113c-4066-b95c-9bc81150d74e",
                            Name = "FullWriter",
                            NormalizedName = "FULLWRITER"
                        },
                        new
                        {
                            Id = "7",
                            ConcurrencyStamp = "6fbcec7b-814c-4f0b-97c1-1d3b5e6749bf",
                            Name = "ArmyAdmin",
                            NormalizedName = "ARMYADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ArmyMembers");
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_ArmyMembers")
                        .HasColumnType("int");

                    b.Property<int?>("Id_ArmySocialsName")
                        .HasColumnType("int");

                    b.Property<string>("SocialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_ArmyMembers");

                    b.HasIndex("Id_ArmySocialsName");

                    b.ToTable("armyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ArmySocialsNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostSocialVideo")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArmySocialsNameId");

                    b.HasIndex("Id_SectionPostSocialVideo");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostVideos");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("armySocialsNames");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_LanguageStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_LanguageStep");

                    b.ToTable("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7821),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7823),
                            Name = "ku-Arab",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7822),
                            TagsName = "Kurdish",
                            Timable = false,
                            Title = "کوردی"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7827),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7829),
                            Name = "fa-IR",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7828),
                            TagsName = "Farsi",
                            Timable = false,
                            Title = "فارسی"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7832),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7835),
                            Name = "en-US",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7834),
                            TagsName = "English",
                            Timable = false,
                            Title = "English"
                        });
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostCommentStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostCommentStep");

                    b.ToTable("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostCommentSteps");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostFiles");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostImages");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostSocialVideos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7888),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7891),
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7889),
                            TagsName = "یوتیوب",
                            Timable = false,
                            Title = "Youtube"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7893),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7896),
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7895),
                            TagsName = "فەیسبوک",
                            Timable = false,
                            Title = "FaceBook"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7899),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7901),
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7900),
                            TagsName = "تێلێگرام",
                            Timable = false,
                            Title = "Telegram"
                        });
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostType")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionThirdStep")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewsNumber")
                        .HasColumnType("int");

                    b.Property<string>("WriterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostType");

                    b.HasIndex("Id_SectionThirdStep");

                    b.ToTable("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7856),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7858),
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7857),
                            TagsName = "نوسراوە",
                            Timable = false,
                            Title = "Article"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7861),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7864),
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7862),
                            TagsName = "ویدیۆ",
                            Timable = false,
                            Title = "Video"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7866),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7869),
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7868),
                            TagsName = "فایل",
                            Timable = false,
                            Title = "File"
                        });
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionFirstStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionFirstStep");

                    b.ToTable("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionSecondStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionSecondStep");

                    b.ToTable("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.WebsiteActiveTimeControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("WebsiteTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteActiveTimeControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7714),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7719),
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7716),
                            TagsName = "وێب سایت",
                            Timable = false,
                            WebsiteTitle = "ناوی وێب سایت"
                        });
                });

            modelBuilder.Entity("Model.WebsiteAdminsControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellphoneNmber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteAdminsControls");
                });

            modelBuilder.Entity("Model.WebsiteThemControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WebsiteThemControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7915),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7918),
                            SectionName = "RightSection",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7917),
                            TagsName = "RightSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7962),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7964),
                            SectionName = "Header",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7963),
                            TagsName = "Header",
                            Timable = false
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7968),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7970),
                            SectionName = "HeaderLeft",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7969),
                            TagsName = "HeaderLeft",
                            Timable = false
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7973),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7976),
                            SectionName = "HeaderCenter",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7974),
                            TagsName = "HeaderCenter",
                            Timable = false
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7979),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7981),
                            SectionName = "HeaderRight",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7980),
                            TagsName = "HeaderRight",
                            Timable = false
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7984),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7986),
                            SectionName = "Search",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7985),
                            TagsName = "Search",
                            Timable = false
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7989),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7991),
                            SectionName = "Marquee",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7990),
                            TagsName = "Marquee",
                            Timable = false
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7994),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7997),
                            SectionName = "LeftSection",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7995),
                            TagsName = "LeftSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(7999),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8002),
                            SectionName = "Footer",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8001),
                            TagsName = "Footer",
                            Timable = false
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8005),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8007),
                            SectionName = "News",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8006),
                            TagsName = "News",
                            Timable = false
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8010),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8012),
                            SectionName = "SectionVideo",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8011),
                            TagsName = "SectionVideo",
                            Timable = false
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8015),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8017),
                            SectionName = "SectionArticle",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8016),
                            TagsName = "SectionArticle",
                            Timable = false
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8020),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8023),
                            SectionName = "MostViewd",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8021),
                            TagsName = "MostViewd",
                            Timable = false
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8025),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8028),
                            SectionName = "ThirdStepCategories",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8027),
                            TagsName = "ThirdStepCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8031),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8033),
                            SectionName = "ViewSubCategoryPosts",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8032),
                            TagsName = "ViewSubCategoryPosts",
                            Timable = false
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8036),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8038),
                            SectionName = "ViewPost",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8037),
                            TagsName = "ViewPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8041),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8043),
                            SectionName = "RelatedPost",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8042),
                            TagsName = "RelatedPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8046),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8049),
                            SectionName = "ViewComment",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8047),
                            TagsName = "ViewComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8051),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8054),
                            SectionName = "InsertComment",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8052),
                            TagsName = "InsertComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8056),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8059),
                            SectionName = "SectionFile",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8058),
                            TagsName = "SectionFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8062),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8064),
                            SectionName = "ViewFile",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8063),
                            TagsName = "ViewFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8067),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8069),
                            SectionName = "LogIn",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8068),
                            TagsName = "LogIn",
                            Timable = false
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8072),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8075),
                            SectionName = "Language",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8073),
                            TagsName = "Language",
                            Timable = false
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8077),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8080),
                            SectionName = "FooterCategories",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8079),
                            TagsName = "FooterCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8083),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8085),
                            SectionName = "NavBarSticky",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8084),
                            TagsName = "NavBarSticky",
                            Timable = false
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8088),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8090),
                            SectionName = "SlideShow",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8089),
                            TagsName = "SlideShow",
                            Timable = false
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8093),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8096),
                            SectionName = "AdminPanel",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8094),
                            TagsName = "AdminPanel",
                            Timable = false
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8098),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8101),
                            SectionName = "AdminPanelArmy",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8100),
                            TagsName = "AdminPanelArmy",
                            Timable = false
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8103),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8106),
                            SectionName = "MenuBar",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8105),
                            TagsName = "MenuBar",
                            Timable = false
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8109),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8111),
                            SectionName = "HeaderTitle",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8110),
                            TagsName = "HeaderTitle",
                            Timable = false
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8114),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8117),
                            SectionName = "AboutUs",
                            StartDate = new DateTime(2023, 7, 16, 20, 37, 13, 491, DateTimeKind.Local).AddTicks(8116),
                            TagsName = "AboutUs",
                            Timable = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.HasOne("Model.ArmyMembers", "ArmyMembers")
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("Id_ArmyMembers")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.ArmySocialsName", "ArmySocialsName")
                        .WithMany()
                        .HasForeignKey("Id_ArmySocialsName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ArmyMembers");

                    b.Navigation("ArmySocialsName");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.HasOne("Model.ArmySocialsName", null)
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("ArmySocialsNameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostSocialVideo", "SectionPostSocialVideo")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostSocialVideo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostSocialVideo");

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.HasOne("Model.SectionLanguage", "SectionLanguage")
                        .WithMany("SectionFirstSteps")
                        .HasForeignKey("Id_LanguageStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionLanguage");
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.HasOne("Model.SectionPostCommentStep", "SectionPostCommentStep")
                        .WithMany("SectionPostAnswerSteps")
                        .HasForeignKey("Id_SectionPostCommentStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostCommentStep");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostCommentSteps")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostFiles")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostImages")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.HasOne("Model.SectionPostType", "SectionPostType")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionPostType")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionThirdStep", "SectionThirdStep")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionThirdStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostType");

                    b.Navigation("SectionThirdStep");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.HasOne("Model.SectionFirstStep", "SectionFirstStep")
                        .WithMany("SectionSecondSteps")
                        .HasForeignKey("Id_SectionFirstStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionFirstStep");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.HasOne("Model.SectionSecondStep", "SectionSecondStep")
                        .WithMany("SectionThirdSteps")
                        .HasForeignKey("Id_SectionSecondStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionSecondStep");
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Navigation("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Navigation("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Navigation("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Navigation("SectionPostCommentSteps");

                    b.Navigation("SectionPostFiles");

                    b.Navigation("SectionPostImages");

                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Navigation("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Navigation("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Navigation("SectionPostSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
