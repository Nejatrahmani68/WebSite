// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace WebsitePresentation.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230716175308_updateoncreatingmodel")]
    partial class updateoncreatingmodel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "3d6dc1f2-d99b-461d-afcd-ae935b6c0b23",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "6ae3b037-bf3f-4b4c-aaad-cc06e91b0d78",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "44c435e3-0dd7-4284-b5c6-b392651fc17c",
                            Name = "Add",
                            NormalizedName = "ADD"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "99157fc6-729e-448c-9934-bf9ab75ead29",
                            Name = "Edit",
                            NormalizedName = "EDIT"
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "97b7ad4c-ec50-47fe-a452-863be689057e",
                            Name = "Delete",
                            NormalizedName = "DELETE"
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "ee6020aa-9b63-408c-a484-dabcabb042de",
                            Name = "FullWriter",
                            NormalizedName = "FULLWRITER"
                        },
                        new
                        {
                            Id = "7",
                            ConcurrencyStamp = "1eabb3c5-f2e6-4d8b-b4fb-1904c6d678b9",
                            Name = "ArmyAdmin",
                            NormalizedName = "ARMYADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ArmyMembers");
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_ArmyMembers")
                        .HasColumnType("int");

                    b.Property<int?>("Id_ArmySocialsName")
                        .HasColumnType("int");

                    b.Property<string>("SocialAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_ArmyMembers");

                    b.HasIndex("Id_ArmySocialsName");

                    b.ToTable("armyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ArmySocialsNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostSocialVideo")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArmySocialsNameId");

                    b.HasIndex("Id_SectionPostSocialVideo");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostVideos");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("armySocialsNames");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_LanguageStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_LanguageStep");

                    b.ToTable("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6617),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6620),
                            Name = "fa-IR",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6619),
                            TagsName = "Farsi",
                            Timable = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6624),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6627),
                            Name = "en-US",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6625),
                            TagsName = "English",
                            Timable = false
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6629),
                            Description = "",
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6632),
                            Name = "ku-Arab",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6631),
                            TagsName = "Kurdish",
                            Timable = false
                        });
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostCommentStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostCommentStep");

                    b.ToTable("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostCommentSteps");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostFiles");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionPostStep")
                        .HasColumnType("int");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostStep");

                    b.ToTable("SectionPostImages");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostSocialVideos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6725),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6728),
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6726),
                            TagsName = "یوتیوب",
                            Timable = false,
                            Title = "Youtube"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6731),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6733),
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6732),
                            TagsName = "فەیسبوک",
                            Timable = false,
                            Title = "FaceBook"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Address = "",
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6736),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6739),
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6738),
                            TagsName = "تێلێگرام",
                            Timable = false,
                            Title = "Telegram"
                        });
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_SectionPostType")
                        .HasColumnType("int");

                    b.Property<int?>("Id_SectionThirdStep")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewsNumber")
                        .HasColumnType("int");

                    b.Property<string>("WriterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionPostType");

                    b.HasIndex("Id_SectionThirdStep");

                    b.ToTable("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SectionPostTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6646),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6649),
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6647),
                            TagsName = "نوسراوە",
                            Timable = false,
                            Title = "Article"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6652),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6655),
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6654),
                            TagsName = "ویدیۆ",
                            Timable = false,
                            Title = "Video"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6658),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6660),
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6659),
                            TagsName = "فایل",
                            Timable = false,
                            Title = "File"
                        });
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionFirstStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionFirstStep");

                    b.ToTable("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_SectionSecondStep")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_SectionSecondStep");

                    b.ToTable("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.WebsiteActiveTimeControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("WebsiteTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteActiveTimeControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6510),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6515),
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6512),
                            TagsName = "وێب سایت",
                            Timable = false,
                            WebsiteTitle = "ناوی وێب سایت"
                        });
                });

            modelBuilder.Entity("Model.WebsiteAdminsControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TellphoneNmber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteAdminsControls");
                });

            modelBuilder.Entity("Model.WebsiteThemControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Timable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("WebsiteThemControls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6754),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6757),
                            SectionName = "RightSection",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6755),
                            TagsName = "RightSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6760),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6762),
                            SectionName = "Header",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6761),
                            TagsName = "Header",
                            Timable = false
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6765),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6768),
                            SectionName = "HeaderLeft",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6766),
                            TagsName = "HeaderLeft",
                            Timable = false
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6770),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6773),
                            SectionName = "HeaderCenter",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6772),
                            TagsName = "HeaderCenter",
                            Timable = false
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6776),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6778),
                            SectionName = "HeaderRight",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6777),
                            TagsName = "HeaderRight",
                            Timable = false
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6781),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6784),
                            SectionName = "Search",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6782),
                            TagsName = "Search",
                            Timable = false
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6786),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6789),
                            SectionName = "Marquee",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6788),
                            TagsName = "Marquee",
                            Timable = false
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6792),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6794),
                            SectionName = "LeftSection",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6793),
                            TagsName = "LeftSection",
                            Timable = false
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6797),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6799),
                            SectionName = "Footer",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6798),
                            TagsName = "Footer",
                            Timable = false
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6802),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6805),
                            SectionName = "News",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6803),
                            TagsName = "News",
                            Timable = false
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6807),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6810),
                            SectionName = "SectionVideo",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6809),
                            TagsName = "SectionVideo",
                            Timable = false
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6813),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6816),
                            SectionName = "SectionArticle",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6815),
                            TagsName = "SectionArticle",
                            Timable = false
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6819),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6822),
                            SectionName = "MostViewd",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6820),
                            TagsName = "MostViewd",
                            Timable = false
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6824),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6827),
                            SectionName = "ThirdStepCategories",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6826),
                            TagsName = "ThirdStepCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6830),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6832),
                            SectionName = "ViewSubCategoryPosts",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6831),
                            TagsName = "ViewSubCategoryPosts",
                            Timable = false
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6835),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6838),
                            SectionName = "ViewPost",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6836),
                            TagsName = "ViewPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6840),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6843),
                            SectionName = "RelatedPost",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6842),
                            TagsName = "RelatedPost",
                            Timable = false
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6846),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6848),
                            SectionName = "ViewComment",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6847),
                            TagsName = "ViewComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6851),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6854),
                            SectionName = "InsertComment",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6852),
                            TagsName = "InsertComment",
                            Timable = false
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6856),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6859),
                            SectionName = "SectionFile",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6858),
                            TagsName = "SectionFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6862),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6864),
                            SectionName = "ViewFile",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6863),
                            TagsName = "ViewFile",
                            Timable = false
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6867),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6870),
                            SectionName = "LogIn",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6868),
                            TagsName = "LogIn",
                            Timable = false
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6872),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6875),
                            SectionName = "Language",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6874),
                            TagsName = "Language",
                            Timable = false
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6878),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6880),
                            SectionName = "FooterCategories",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6879),
                            TagsName = "FooterCategories",
                            Timable = false
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6883),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6886),
                            SectionName = "NavBarSticky",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6885),
                            TagsName = "NavBarSticky",
                            Timable = false
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6889),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6891),
                            SectionName = "SlideShow",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6890),
                            TagsName = "SlideShow",
                            Timable = false
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6894),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6896),
                            SectionName = "AdminPanel",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6895),
                            TagsName = "AdminPanel",
                            Timable = false
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6899),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6902),
                            SectionName = "AdminPanelArmy",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6900),
                            TagsName = "AdminPanelArmy",
                            Timable = false
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6904),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6907),
                            SectionName = "MenuBar",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6906),
                            TagsName = "MenuBar",
                            Timable = false
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6910),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6912),
                            SectionName = "HeaderTitle",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6911),
                            TagsName = "HeaderTitle",
                            Timable = false
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            CreateDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6915),
                            Email = "NejatRahmani68@gmail.com",
                            EndDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6917),
                            SectionName = "AboutUs",
                            StartDate = new DateTime(2023, 7, 16, 19, 53, 8, 223, DateTimeKind.Local).AddTicks(6916),
                            TagsName = "AboutUs",
                            Timable = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.ArmyMembersAccount", b =>
                {
                    b.HasOne("Model.ArmyMembers", "ArmyMembers")
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("Id_ArmyMembers")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.ArmySocialsName", "ArmySocialsName")
                        .WithMany()
                        .HasForeignKey("Id_ArmySocialsName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ArmyMembers");

                    b.Navigation("ArmySocialsName");
                });

            modelBuilder.Entity("Model.ArmyMembersAccounts", b =>
                {
                    b.HasOne("Model.ArmySocialsName", null)
                        .WithMany("ArmyMembersAccounts")
                        .HasForeignKey("ArmySocialsNameId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostSocialVideo", "SectionPostSocialVideo")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostSocialVideo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostVideos")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostSocialVideo");

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.HasOne("Model.SectionLanguage", "SectionLanguage")
                        .WithMany("SectionFirstSteps")
                        .HasForeignKey("Id_LanguageStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionLanguage");
                });

            modelBuilder.Entity("Model.SectionPostAnswerStep", b =>
                {
                    b.HasOne("Model.SectionPostCommentStep", "SectionPostCommentStep")
                        .WithMany("SectionPostAnswerSteps")
                        .HasForeignKey("Id_SectionPostCommentStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostCommentStep");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostCommentSteps")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostFile", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostFiles")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostImage", b =>
                {
                    b.HasOne("Model.SectionPostStep", "SectionPostStep")
                        .WithMany("SectionPostImages")
                        .HasForeignKey("Id_SectionPostStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostStep");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.HasOne("Model.SectionPostType", "SectionPostType")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionPostType")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Model.SectionThirdStep", "SectionThirdStep")
                        .WithMany("SectionPostSteps")
                        .HasForeignKey("Id_SectionThirdStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionPostType");

                    b.Navigation("SectionThirdStep");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.HasOne("Model.SectionFirstStep", "SectionFirstStep")
                        .WithMany("SectionSecondSteps")
                        .HasForeignKey("Id_SectionFirstStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionFirstStep");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.HasOne("Model.SectionSecondStep", "SectionSecondStep")
                        .WithMany("SectionThirdSteps")
                        .HasForeignKey("Id_SectionSecondStep")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SectionSecondStep");
                });

            modelBuilder.Entity("Model.ArmyMembers", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.ArmySocialsName", b =>
                {
                    b.Navigation("ArmyMembersAccounts");
                });

            modelBuilder.Entity("Model.SectionFirstStep", b =>
                {
                    b.Navigation("SectionSecondSteps");
                });

            modelBuilder.Entity("Model.SectionLanguage", b =>
                {
                    b.Navigation("SectionFirstSteps");
                });

            modelBuilder.Entity("Model.SectionPostCommentStep", b =>
                {
                    b.Navigation("SectionPostAnswerSteps");
                });

            modelBuilder.Entity("Model.SectionPostSocialVideo", b =>
                {
                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostStep", b =>
                {
                    b.Navigation("SectionPostCommentSteps");

                    b.Navigation("SectionPostFiles");

                    b.Navigation("SectionPostImages");

                    b.Navigation("SectionPostVideos");
                });

            modelBuilder.Entity("Model.SectionPostType", b =>
                {
                    b.Navigation("SectionPostSteps");
                });

            modelBuilder.Entity("Model.SectionSecondStep", b =>
                {
                    b.Navigation("SectionThirdSteps");
                });

            modelBuilder.Entity("Model.SectionThirdStep", b =>
                {
                    b.Navigation("SectionPostSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
